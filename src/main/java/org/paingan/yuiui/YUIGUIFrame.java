/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.paingan.yuiui;

import com.yahoo.platform.yui.compressor.CssCompressor;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import com.yahoo.platform.yui.compressor.JavaScriptCompressor;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import org.apache.commons.io.IOUtils;

/**
 *
 * @author paulusyansen
 */
public class YUIGUIFrame extends javax.swing.JFrame {

    /**
     * Creates new form YUIGUIFrame
     */
    public YUIGUIFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtConsole = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple YUI Compressor");
        setResizable(false);

        txtConsole.setEditable(false);
        txtConsole.setColumns(20);
        txtConsole.setRows(5);
        jScrollPane1.setViewportView(txtConsole);

        jLabel1.setText("File Source:");

        txtPath.setEditable(false);
        txtPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPathMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPath))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPathMouseClicked
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        FileNameExtensionFilter filter = new FileNameExtensionFilter("javascript","js","css");
        jfc.setFileFilter(filter);
    
        jfc.setDialogTitle("Choose a directory to save your file: ");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int returnValue = jfc.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            if (jfc.getSelectedFile().isFile()) {
                txtConsole.append("\nPath: " + jfc.getSelectedFile().getParent() +"\nFileName:"+jfc.getSelectedFile().getName()+"\n");
                txtPath.setText(jfc.getSelectedFile().getAbsolutePath());
            }
        } else {
            txtConsole.setText("No file chosen!");
        }
        
        String inputFilename = jfc.getSelectedFile().getAbsolutePath();
        int index = jfc.getSelectedFile().getName().indexOf(".");
        String filename = jfc.getSelectedFile().getName().substring(0, index);
        String ext = jfc.getSelectedFile().getName().substring(index);
        
        String outputFilename = jfc.getSelectedFile().getParent()+"/"+filename+".min"+ext;
        Options o = new Options(); // use defaults
        
        txtConsole.append("\nExt: " + ext +"\n");
        try {
            
            if(".js".equals(ext)) {
                compressJavaScript(inputFilename, outputFilename, o);
                txtConsole.append(jfc.getSelectedFile().getName()+" JS file compress successfully\n");
            } 
            if(".css".equals(ext)) {
                compressCSS(inputFilename, outputFilename, o);
                txtConsole.append(jfc.getSelectedFile().getName()+" CSS file compress successfully\n");
            }
            
        } catch (Exception ex) {
            Logger.getLogger(YUIGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
            
            txtConsole.append(ex.getMessage()+"\n");
        }
    }//GEN-LAST:event_txtPathMouseClicked

    private String executeCommand(String command) {
	StringBuffer output = new StringBuffer();

	Process p;
	try {
            p = Runtime.getRuntime().exec(command);
            p.waitFor();
            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

            String line = "";
            while ((line = reader.readLine())!= null) {
		output.append(line + "\n");
            }

	} catch (Exception e) {
            e.printStackTrace();
	}

	return output.toString();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(YUIGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(YUIGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(YUIGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YUIGUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new YUIGUIFrame().setVisible(true);
            }
        });
    }
    
    /**
     * 
     * @param inputFilename
     * @param outputFilename
     * @param o
     * @throws IOException 
     */
    public static void compressJavaScript(String inputFilename, String outputFilename, Options o) throws IOException {
        Reader in = null;
        Writer out = null;
        try {
            in = new InputStreamReader(new FileInputStream(inputFilename), o.charset);

            JavaScriptCompressor compressor = new JavaScriptCompressor(in, new YuiCompressorErrorReporter());
            in.close(); in = null;

            out = new OutputStreamWriter(new FileOutputStream(outputFilename), o.charset);
            compressor.compress(out, o.lineBreakPos, o.munge, o.verbose, o.preserveAllSemiColons, o.disableOptimizations);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
    
    /**
     * 
     * @param inputFilename
     * @param outputFilename
     * @param o
     * @throws IOException 
     */
    public static void compressCSS(String inputFilename, String outputFilename, Options o) throws IOException {
        Reader in = null;
        Writer out = null;
        try {
            in = new InputStreamReader(new FileInputStream(inputFilename), o.charset);

            CssCompressor compressor = new CssCompressor(in);
            in.close(); in = null;

            out = new OutputStreamWriter(new FileOutputStream(outputFilename), o.charset);
            compressor.compress(out, o.lineBreakPos);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtConsole;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables
}

//private static class YuiCompressorErrorReporter implements ErrorReporter {
//    public void warning(String message, String sourceName, int line, String lineSource, int lineOffset) {
//        if (line < 0) {
//            logger.log(Level.WARNING, message);
//        } else {
//            logger.log(Level.WARNING, line + ':' + lineOffset + ':' + message);
//        }
//    }
// 
//    public void error(String message, String sourceName, int line, String lineSource, int lineOffset) {
//        if (line < 0) {
//            logger.log(Level.SEVERE, message);
//        } else {
//            logger.log(Level.SEVERE, line + ':' + lineOffset + ':' + message);
//        }
//    }
// 
//    public EvaluatorException runtimeError(String message, String sourceName, int line, String lineSource, int lineOffset) {
//        error(message, sourceName, line, lineSource, lineOffset);
//        return new EvaluatorException(message);
//    }
//}

//class Options {
//    public String charset = "UTF-8";
//    public int lineBreakPos = -1;
//    public boolean munge = true;
//    public boolean verbose = false;
//    public boolean preserveAllSemiColons = false;
//    public boolean disableOptimizations = false;
//}

